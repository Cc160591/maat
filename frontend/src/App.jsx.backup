import React, { useState, useEffect } from 'react';
import { Upload, Download, Play, Clock, FileVideo, Loader, CheckCircle, XCircle, 
         Settings, Home, Video, Zap, Users, Bell, Search, Menu, 
         Youtube, Instagram, Facebook, Music, Subtitles } from 'lucide-react';

const MAATExtractor = () => {
  const [videoUrl, setVideoUrl] = useState('');
  const [timestampInput, setTimestampInput] = useState('');
  const [clipDuration, setClipDuration] = useState(60);
  const [isProcessing, setIsProcessing] = useState(false);
  const [results, setResults] = useState(null);
  const [progress, setProgress] = useState(0);
  const [progressMessage, setProgressMessage] = useState('');
  const [socialFormats, setSocialFormats] = useState({
    youtube: true,
    tiktok: true,
    instagram: true,
    facebook: false
  });
  const [subtitlesEnabled, setSubtitlesEnabled] = useState(false);
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);

  // API Base URL
  const API_BASE = 'http://localhost:8000';

  const convertSimpleFormat = (input) => {
    // Converte "0:01-0:03, 0:05-0:07" → formato "Stream Time Marker"
    const ranges = input.split(',').map(s => s.trim()).filter(s => s);
    
    return ranges.map((range, index) => {
      if (range.includes('-')) {
        const [start, end] = range.split('-').map(s => s.trim());
        // Usa il tempo di inizio del range
        return `${start} Stream Time Marker - Clip ${index + 1}`;
      } else {
        // Se è un singolo timestamp
        return `${range} Stream Time Marker - Momento ${index + 1}`;
      }
    }).join('\n');
  };

  const parseTimestamps = (input) => {
    const pattern = /(\d+:\d+:\d+)\s+Stream Time Marker\s*-?\s*(.*)/g;
    const timestamps = [];
    let match;
    
    while ((match = pattern.exec(input)) !== null) {
      timestamps.push({
        original: match[1],
        description: match[2] || `Evento al ${match[1]}`
      });
    }
    
    return timestamps;
  };

  const processClips = async () => {
    if (!videoUrl.trim() || !timestampInput.trim()) {
      alert('⚠️ Compila tutti i campi!');
      return;
    }

    // Conversione automatica formato semplice → Stream Time Marker
    let processedInput = timestampInput;
    if (!timestampInput.includes('Stream Time Marker')) {
      processedInput = convertSimpleFormat(timestampInput);
    }

    const timestamps = parseTimestamps(processedInput);
    if (timestamps.length === 0) {
      alert('⚠️ Nessun timestamp valido trovato!');
      return;
    }

    setIsProcessing(true);
    setProgress(0);
    setProgressMessage('Iniziando elaborazione...');
    setResults(null);

    try {
      const response = await fetch(`${API_BASE}/api/extract-clips`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          video_url: videoUrl,
          timestamps_input: processedInput,
          clip_duration: clipDuration,
          social_formats: socialFormats,
          subtitles_enabled: subtitlesEnabled
        })
      });

      if (!response.ok) {
        throw new Error(`Errore: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.task_id) {
        pollProgress(data.task_id);
      } else {
        setResults(data);
        setIsProcessing(false);
      }

    } catch (error) {
      console.error('Errore:', error);
      alert(`Errore durante l'elaborazione: ${error.message}`);
      setIsProcessing(false);
    }
  };

  const pollProgress = async (taskId) => {
    const pollInterval = setInterval(async () => {
      try {
        const response = await fetch(`${API_BASE}/api/progress/${taskId}`);
        const data = await response.json();
        
        setProgress(data.progress || 0);
        setProgressMessage(data.message || 'Elaborazione in corso...');
        
        if (data.status === 'completed') {
          clearInterval(pollInterval);
          setResults(data.results);
          setIsProcessing(false);
        } else if (data.status === 'failed') {
          clearInterval(pollInterval);
          alert('Elaborazione fallita: ' + data.error);
          setIsProcessing(false);
        }
      } catch (error) {
        console.error('Errore polling:', error);
      }
    }, 2000);

    setTimeout(() => {
      clearInterval(pollInterval);
      if (isProcessing) {
        setIsProcessing(false);
        alert('Timeout elaborazione');
      }
    }, 600000);
  };

  const downloadZip = async () => {
    if (!results?.download_url) return;
    
    try {
      const response = await fetch(`${API_BASE}${results.download_url}`);
      const blob = await response.blob();
      
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = results.zip_filename || 'timestamp_clips.zip';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      alert('Errore download: ' + error.message);
    }
  };

  const formatTime = (seconds) => {
    const h = Math.floor(seconds / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = seconds % 60;
    return h > 0 ? `${h}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}` 
                 : `${m}:${s.toString().padStart(2, '0')}`;
  };

  const toggleFormat = (format) => {
    setSocialFormats(prev => ({
      ...prev,
      [format]: !prev[format]
    }));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-blue-100 to-cyan-100">
      {/* Sidebar */}
      <div className={`fixed left-0 top-0 h-full bg-gray-900 transition-all duration-300 z-40 ${sidebarCollapsed ? 'w-16' : 'w-64'}`}>
        <div className="p-4">
          {/* Logo */}
          <div className="flex items-center mb-8">
            {!sidebarCollapsed && (
              <>
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center mr-3">
                  <Video className="text-white" size={20} />
                </div>
                <span className="text-white text-xl font-bold">MAAT</span>
              </>
            )}
            <button 
              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
              className="ml-auto text-gray-400 hover:text-white transition-colors"
            >
              <Menu size={20} />
            </button>
          </div>

          {/* Navigation */}
          <nav className="space-y-2">
            <div className="flex items-center px-3 py-2 bg-blue-600 rounded-lg text-white">
              <Zap size={20} />
              {!sidebarCollapsed && <span className="ml-3 font-medium">Estrai Clip</span>}
            </div>
            
            <div className="flex items-center px-3 py-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors cursor-pointer">
              <Home size={20} />
              {!sidebarCollapsed && <span className="ml-3">Dashboard</span>}
            </div>
            
            <div className="flex items-center px-3 py-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors cursor-pointer">
              <FileVideo size={20} />
              {!sidebarCollapsed && <span className="ml-3">I tuoi video</span>}
            </div>
            
            <div className="flex items-center px-3 py-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors cursor-pointer">
              <Settings size={20} />
              {!sidebarCollapsed && <span className="ml-3">Impostazioni</span>}
            </div>
          </nav>
        </div>

        {/* User Section */}
        {!sidebarCollapsed && (
          <div className="absolute bottom-4 left-4 right-4">
            <div className="bg-gray-800 rounded-lg p-3">
              <div className="flex items-center">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                  <Users className="text-white" size={16} />
                </div>
                <div className="ml-3">
                  <div className="text-white text-sm font-medium">Creator</div>
                  <div className="text-gray-400 text-xs">Piano gratuito</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Main Content */}
      <div className={`transition-all duration-300 ${sidebarCollapsed ? 'ml-16' : 'ml-64'}`}>
        {/* Header */}
        <div className="bg-white/70 backdrop-blur-md border-b border-white/20 px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Estrai Clip da Stream</h1>
              <p className="text-gray-600 mt-1">Crea clip perfette per i social dai tuoi stream usando i timestamp</p>
            </div>
            <div className="flex items-center space-x-4">
              <button className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                <Search size={20} />
              </button>
              <button className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                <Bell size={20} />
              </button>
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full"></div>
            </div>
          </div>
        </div>

        <div className="p-6 space-y-6">
          {/* Quick Start Card */}
          <div className="bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl p-6 text-white">
            <h2 className="text-xl font-bold mb-2">🚀 Inizia subito</h2>
            <p className="text-blue-100 mb-4">Incolla l'URL del tuo stream e i timestamp per creare clip ottimizzate per ogni piattaforma</p>
            <div className="flex items-center space-x-4">
              <div className="flex items-center text-blue-100">
                <Youtube className="mr-1" size={16} />
                <span className="text-sm">YouTube</span>
              </div>
              <div className="flex items-center text-blue-100">
                <Music className="mr-1" size={16} />
                <span className="text-sm">TikTok</span>
              </div>
              <div className="flex items-center text-blue-100">
                <Instagram className="mr-1" size={16} />
                <span className="text-sm">Instagram</span>
              </div>
              <div className="flex items-center text-blue-100">
                <Facebook className="mr-1" size={16} />
                <span className="text-sm">Facebook</span>
              </div>
              <div className="flex items-center text-blue-100">
                <Subtitles className="mr-1" size={16} />
                <span className="text-sm">Sottotitoli AI</span>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Input Form */}
            <div className="lg:col-span-2 space-y-6">
              {/* Video URL Card */}
              <div className="bg-white/70 backdrop-blur-md border border-white/20 rounded-2xl p-6 shadow-lg">
                <div className="flex items-center mb-4">
                  <Play className="text-blue-600 mr-2" size={20} />
                  <h3 className="text-lg font-semibold text-gray-900">URL Video</h3>
                </div>
                <input
                  type="url"
                  value={videoUrl}
                  onChange={(e) => setVideoUrl(e.target.value)}
                  placeholder="https://www.twitch.tv/videos/..."
                  className="w-full p-4 bg-white/50 backdrop-blur border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-gray-900 placeholder-gray-500"
                  disabled={isProcessing}
                />
                <p className="text-sm text-gray-600 mt-2">Supporta Twitch, YouTube, e altre piattaforme</p>
              </div>

              {/* Timestamps Card */}
              <div className="bg-white/70 backdrop-blur-md border border-white/20 rounded-2xl p-6 shadow-lg">
                <div className="flex items-center mb-4">
                  <Clock className="text-blue-600 mr-2" size={20} />
                  <h3 className="text-lg font-semibold text-gray-900">Timestamp</h3>
                </div>
                <textarea
                  value={timestampInput}
                  onChange={(e) => setTimestampInput(e.target.value)}
                  placeholder="0:15-0:18, 0:25-0:30"
                  className="w-full p-4 bg-white/50 backdrop-blur border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all font-mono text-sm text-gray-900 placeholder-gray-500 resize-none"
                  rows={6}
                  disabled={isProcessing}
                />
                <div className="flex items-center justify-between mt-2">
                  <p className="text-sm text-gray-600">Formato semplice: "0:15-0:18, 0:25-0:30" o formato completo</p>
                  <span className="text-sm text-blue-600 font-medium">{parseTimestamps(timestampInput.includes('Stream Time Marker') ? timestampInput : convertSimpleFormat(timestampInput)).length} clip</span>
                </div>
              </div>

              {/* Duration Card */}
              <div className="bg-white/70 backdrop-blur-md border border-white/20 rounded-2xl p-6 shadow-lg">
                <div className="flex items-center mb-4">
                  <FileVideo className="text-blue-600 mr-2" size={20} />
                  <h3 className="text-lg font-semibold text-gray-900">Durata Clip</h3>
                </div>
                <div className="flex items-center space-x-4">
                  <input
                    type="range"
                    min="10"
                    max="300"
                    value={clipDuration}
                    onChange={(e) => setClipDuration(parseInt(e.target.value))}
                    className="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                    disabled={isProcessing}
                  />
                  <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-lg font-medium min-w-[80px] text-center">
                    {clipDuration}s
                  </div>
                </div>
                <p className="text-sm text-gray-600 mt-2">La clip inizierà {clipDuration} secondi prima del timestamp</p>
              </div>
            </div>

            {/* Settings Sidebar */}
            <div className="space-y-6">
              {/* Sottotitoli AI */}
              <div className="bg-white/70 backdrop-blur-md border border-white/20 rounded-2xl p-6 shadow-lg">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <Subtitles className="mr-2 text-blue-600" size={20} />
                  Sottotitoli AI
                </h3>
                <div 
                  onClick={() => setSubtitlesEnabled(!subtitlesEnabled)}
                  className={`flex items-center p-4 rounded-xl cursor-pointer transition-all ${
                    subtitlesEnabled 
                      ? 'bg-gradient-to-r from-blue-50 to-cyan-50 border-2 border-blue-200' 
                      : 'bg-gray-50 border-2 border-transparent hover:bg-gray-100'
                  }`}
                >
                  <div className="flex-1">
                    <div className="font-semibold text-gray-900 mb-1">
                      Genera Sottotitoli
                    </div>
                    <div className="text-sm text-gray-600">
                      {subtitlesEnabled ? 'Sottotitoli automatici attivi' : 'Clicca per attivare'}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      Powered by OpenAI Whisper
                    </div>
                  </div>
                  <div className={`relative w-12 h-6 rounded-full transition-colors ${
                    subtitlesEnabled ? 'bg-blue-600' : 'bg-gray-300'
                  }`}>
                    <div className={`absolute top-1 w-4 h-4 bg-white rounded-full transition-transform ${
                      subtitlesEnabled ? 'left-7' : 'left-1'
                    }`}></div>
                  </div>
                </div>
                {subtitlesEnabled && (
                  <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <div className="text-sm text-blue-800">
                      <p className="font-medium">✨ Sottotitoli AI attivi:</p>
                      <ul className="text-xs mt-1 space-y-1">
                        <li>• Trascrizione automatica con OpenAI</li>
                        <li>• Sottotitoli integrati nei video</li>
                        <li>• Ottimizzati per ogni piattaforma</li>
                      </ul>
                    </div>
                  </div>
                )}
              </div>

              {/* Social Formats */}
              <div className="bg-white/70 backdrop-blur-md border border-white/20 rounded-2xl p-6 shadow-lg">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Formati Social</h3>
                <div className="space-y-3">
                  {[
                    { key: 'youtube', icon: Youtube, label: 'YouTube', desc: '16:9 HD', color: 'red' },
                    { key: 'tiktok', icon: Music, label: 'TikTok', desc: '9:16 Verticale', color: 'black' },
                    { key: 'instagram', icon: Instagram, label: 'Instagram', desc: '1:1 Quadrato', color: 'pink' },
                    { key: 'facebook', icon: Facebook, label: 'Facebook', desc: '16:9 Standard', color: 'blue' }
                  ].map((format) => (
                    <div 
                      key={format.key}
                      onClick={() => toggleFormat(format.key)}
                      className={`flex items-center p-3 rounded-xl cursor-pointer transition-all ${
                        socialFormats[format.key] 
                          ? 'bg-blue-50 border-2 border-blue-200' 
                          : 'bg-gray-50 border-2 border-transparent hover:bg-gray-100'
                      }`}
                    >
                      <format.icon 
                        size={20} 
                        className={socialFormats[format.key] ? 'text-blue-600' : 'text-gray-400'} 
                      />
                      <div className="ml-3 flex-1">
                        <div className="font-medium text-gray-900">{format.label}</div>
                        <div className="text-sm text-gray-500">{format.desc}</div>
                      </div>
                      <div className={`w-5 h-5 rounded-full border-2 ${
                        socialFormats[format.key] 
                          ? 'bg-blue-600 border-blue-600' 
                          : 'border-gray-300'
                      }`}>
                        {socialFormats[format.key] && (
                          <CheckCircle className="text-white" size={16} />
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Action Button */}
              <button
                onClick={processClips}
                disabled={isProcessing}
                className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 text-white py-4 px-6 rounded-xl font-semibold text-lg hover:from-blue-700 hover:to-cyan-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center shadow-lg"
              >
                {isProcessing ? (
                  <>
                    <Loader className="animate-spin mr-2" size={20} />
                    Elaborazione...
                  </>
                ) : (
                  <>
                    <Zap className="mr-2" size={20} />
                    Estrai Clip
                  </>
                )}
              </button>
            </div>
          </div>

          {/* Progress Card */}
          {isProcessing && (
            <div className="bg-white/70 backdrop-blur-md border border-white/20 rounded-2xl p-6 shadow-lg">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900">Elaborazione in corso</h3>
                <span className="text-sm font-medium text-blue-600">{progress}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-3 mb-2">
                <div 
                  className="bg-gradient-to-r from-blue-600 to-cyan-600 h-3 rounded-full transition-all duration-500"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <p className="text-sm text-gray-600">{progressMessage}</p>
            </div>
          )}

          {/* Results Card */}
          {results && (
            <div className="bg-white/70 backdrop-blur-md border border-white/20 rounded-2xl p-6 shadow-lg">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-gray-900 flex items-center">
                  <CheckCircle className="mr-2 text-green-500" size={24} />
                  Risultati Elaborazione
                </h2>
                {results.download_url && (
                  <button
                    onClick={downloadZip}
                    className="bg-green-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-green-700 transition-colors flex items-center"
                  >
                    <Download className="mr-2" size={16} />
                    Scarica ZIP
                  </button>
                )}
              </div>

              {/* Stats Grid */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-green-50 border border-green-200 rounded-xl p-4 text-center">
                  <div className="text-2xl font-bold text-green-700">{results.successful_clips || 0}</div>
                  <div className="text-sm text-green-600">Clip Riuscite</div>
                </div>
                <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 text-center">
                  <div className="text-2xl font-bold text-blue-700">{results.total_size_mb?.toFixed(1) || '0.0'} MB</div>
                  <div className="text-sm text-blue-600">Dimensione Totale</div>
                </div>
                <div className="bg-purple-50 border border-purple-200 rounded-xl p-4 text-center">
                  <div className="text-2xl font-bold text-purple-700">{results.total_files || 0}</div>
                  <div className="text-sm text-purple-600">File Generati</div>
                </div>
                <div className="bg-cyan-50 border border-cyan-200 rounded-xl p-4 text-center">
                  <div className="text-2xl font-bold text-cyan-700">
                    {results.subtitles_enabled ? (results.clips_with_subtitles || 0) : '0'}
                  </div>
                  <div className="text-sm text-cyan-600">Con Sottotitoli</div>
                </div>
              </div>

              {/* Subtitles Status */}
              {results.subtitles_enabled && (
                <div className="mb-6 p-4 bg-cyan-50 border border-cyan-200 rounded-xl">
                  <div className="flex items-center">
                    <Subtitles className="text-cyan-600 mr-2" size={20} />
                    <div className="flex-1">
                      <h4 className="font-semibold text-cyan-800">Sottotitoli AI Generati</h4>
                      <p className="text-sm text-cyan-600">
                        {results.clips_with_subtitles} di {results.successful_clips} clip hanno sottotitoli automatici
                      </p>
                    </div>
                    <div className="text-cyan-600 font-medium">
                      ✅ Attivi
                    </div>
                  </div>
                </div>
              )}

              {/* Clip Details */}
              {results.clips && results.clips.length > 0 && (
                <div className="space-y-3">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Dettagli Clip</h3>
                  {results.clips.map((clip, index) => (
                    <div key={index} className="bg-gray-50 border border-gray-200 rounded-xl p-4">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h4 className="font-semibold text-gray-900 mb-2 flex items-center">
                            {clip.success ? (
                              <CheckCircle className="mr-2 text-green-500" size={18} />
                            ) : (
                              <XCircle className="mr-2 text-red-500" size={18} />
                            )}
                            Clip #{index + 1}
                            {clip.has_subtitles && (
                              <span className="ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-cyan-100 text-cyan-800">
                                <Subtitles size={12} className="mr-1" />
                                Sottotitoli
                              </span>
                            )}
                          </h4>
                          {clip.success ? (
                            <div className="text-sm text-gray-600 space-y-1">
                              <p><strong>Timestamp:</strong> {formatTime(clip.timestamp)}</p>
                              <p><strong>Durata:</strong> {clip.duration}s</p>
                              <p><strong>Formati:</strong> {clip.formats_count || 0}</p>
                              <p><strong>Dimensione:</strong> {clip.size_mb?.toFixed(1)} MB</p>
                              {clip.description && <p><strong>Descrizione:</strong> {clip.description}</p>}
                              {clip.has_subtitles && (
                                <p className="text-cyan-600"><strong>Sottotitoli:</strong> ✅ Generati automaticamente</p>
                              )}
                            </div>
                          ) : (
                            <div className="text-sm text-red-600 space-y-1">
                              <p>❌ Elaborazione fallita</p>
                              {clip.error && <p className="text-xs text-gray-500">{clip.error}</p>}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MAATExtractor;
